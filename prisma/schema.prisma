// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // set this to your Supabase Postgres connection string
  // Optional for migrations: uncomment and set a shadow DB if needed
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Basic reference tables
model Province {
  id            String         @id @default(cuid())
  name          String         @unique
  municipalities Municipality[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Municipality {
  id            String    @id @default(cuid())
  provinceId    String
  province      Province  @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  name          String
  barangays     Barangay[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([provinceId, name])
}

model Barangay {
  id             String         @id @default(cuid())
  municipalityId String
  municipality   Municipality   @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
  name           String
  incidents      Incident[]
  profiles       Profile[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([municipalityId, name])
}

model Department {
  id          String      @id @default(cuid())
  code        String      @unique
  name        String
  categories  Category[]
  profiles    Profile[]
  assignments Assignment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id           String       @id @default(cuid())
  name         String       @unique
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  incidents    Incident[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Priority {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  targetHours  Int      // SLA in hours
  incidents    Incident[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Status {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  incidents  Incident[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Users & roles
model Profile {
  id           String       @id @default(cuid())
  userId       String       @unique
  fullName     String?
  phone        String?
  role         Role         @default(CITIZEN)
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  barangayId   String?
  barangay     Barangay?    @relation(fields: [barangayId], references: [id])
  reportedIncidents Incident[] @relation("Reporter")
  assignedIncidents Assignment[] @relation("Assignee")
  updates      IncidentUpdate[]
  attachments  Attachment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Cases / incidents
model Incident {
  id            String           @id @default(cuid())
  caseCode      String           @unique
  reporterId    String?
  reporter      Profile?         @relation("Reporter", fields: [reporterId], references: [id], onDelete: SetNull)
  barangayId    String?
  barangay      Barangay?        @relation(fields: [barangayId], references: [id])
  categoryId    String?
  category      Category?        @relation(fields: [categoryId], references: [id])
  priorityId    Int              @default(2)
  priority      Priority         @relation(fields: [priorityId], references: [id])
  statusId      Int              @default(1)
  status        Status           @relation(fields: [statusId], references: [id])
  title         String
  description   String?
  latitude      Float?
  longitude     Float?
  address       String?
  isPublic      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  updates       IncidentUpdate[]
  assignments   Assignment[]
  attachments   Attachment[]
}

model IncidentUpdate {
  id         String    @id @default(cuid())
  incidentId String
  incident   Incident  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  actorId    String?
  actor      Profile?  @relation(fields: [actorId], references: [id], onDelete: SetNull)
  note       String?
  oldStatus  Int?
  newStatus  Int?
  createdAt  DateTime  @default(now())
}

model Assignment {
  id         String     @id @default(cuid())
  incidentId String
  incident   Incident   @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  departmentId String?
  department Department? @relation(fields: [departmentId], references: [id])
  assigneeId String?
  assignee   Profile?   @relation("Assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assignedAt DateTime   @default(now())
}

model Attachment {
  id         String    @id @default(cuid())
  incidentId String
  incident   Incident  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  filePath   String
  mimeType   String?
  uploadedBy String?
  uploader   Profile?  @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  createdAt  DateTime  @default(now())
}

enum Role {
  CITIZEN
  STAFF
  MANAGER
  ADMIN
}